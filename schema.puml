@startuml programme
header test
note "--> = fonction appelle une autre fonction" as note1

map "Constantes " as constantes {
    NB_CLASSES_MAX => 20
    NB_TESTS_MAX => 10000
}


map "ResultClass"  as resClas {
    nbCorrect => int
    nbTotal => int
}

' Fonctions affichage
object "void displayResultsForEachClass()" as drfec {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    --
    **do**
    affiche le tableau proprement sur base des résultats
    calculer par resultForEachClass()
}

object "void displayAccuracy()" as da {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    **do**
    affiche la précision
}

object "void displayClass()" as dc {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    --
    **do**
     
}


'Fonctions calcul

object "int resultsForEachClass()" as main {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    - ResultClass results[NB_TESTS_MAX]
    --
    **do**
    initaliser le tableau result avec nbCorrect et nbTotal à 0 pour toutes les cellules

    Boucle 'nbTests' fois sur les entrées.

    Pour chaque entrée :
    dans la ligne realClass-1 à la colonne estimateClass-1 on ajoute 1
    --
    **return**
    la taille du tableau results
}

object "bool correctEstimation()" as corEst {
    **arguments**
    - int real
    - int estimate
    --
    **do**
    vérifie si l'estimation est correct
    --
    **return**
    bool correct
}

object "double toPercent()" as pct {
    **arguments**
    - double ratio
     --
    **do**
    converti un ratio en poucentage
    --
    **return**
    double percent
}


'note left of creClass : Précondition:\nla classe n'existe pas\ndans result

object "int createClass()" as creClass {
    **arguments**
    - ResultClass results[]
    - int resultsLength
    - int class
    --
    **do**
    ajoute une nouvelle classe
    augmente la taille du tableau
    --
    **return**
    int newLength
}

object "bool classExist()" as ce {
    **arguments**
    - int class
    - ResultClass results[]
    --
    **do**
    Vérifie si une classe existe déjàf
    dans le tableau de résultats
    --
    **return**
    bool exist
}

object "double accuracy()" as acc {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int length
    --
    **do**
    calcule la précision des résultats en bouclant 1 fois
    et en vérifiant si les nombres correspondent.
    --
    **return**
    un double entre 0 et 1 qui correspond
    au ratio de bonne réponse
}

object "int statsClass()" as staCla {
    
}

' Liens
'main --> corEst
main --> corEst
main --> ce
main --> creClass
drfec --> pct
drfec --> main
da --> acc
da --> pct
' note left of drfec: "bonjour"

@enduml