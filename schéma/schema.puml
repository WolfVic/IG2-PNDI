@startuml programme
title __**Analyse du projet « reconnaissance d’activité humaine via un smartphone. »**__
caption Par Thibaut Berg, Joachim Lejeune  et Victor Santelé
left to right direction

legend top left
--> = fonction appelle une autre fonction
end legend



map "Constantes " as constantes #lightgrey {
    NB_CLASSES_MAX => 20
    NB_TESTS_MAX => 10000
}

map "struct ResultClass"  as resClas #lightgrey {
    numClass => int
    nbCorrect => int
    nbTotal => int
    pSuiv => ptr ResultClass
}

' Fonctions affichage
object "void displayResultsForEachClass()" as drfec {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    --
    **do**
    affiche le tableau proprement sur base des résultats
    calculer par resultForEachClass()
    à la fin, libère la mémoire avec freeResultClassLinkedList();
}

object "void displayAccuracy()" as da {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    --
    **do**
    affiche la précision
}

object "void displayClass()" as dc {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    --
    **do**
    affiche le tableau proprement.
    Utilise statsClass() pour ordonner les données
    et sumElements() pour le total pour chaque classe.
}


'Fonctions calcul

object "ResultClass* resultsForEachClass()" as main {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    --
    **do**
    set le pointeur de début de la liste chainée à NULL.
    Boucle 'nbTests' fois sur les entrées.
    Pour chaque entrée :
    recherche la bonne classe dans la liste chainée avec searchClass()
    Si la recherche retourne NULL:
    on set pFirstClass avec la classe créé grâce à createClass()
    on utilise la classe créé pour la suite
    Si le numéro de classe retourné par la recherche ne correspond pas à la classe demandée:
    on crée une nouvelle classe que l'on met à la suite du pointeur retourné.
    et on utilise cette nouvelle classe pour la suite. \n
    on vérifie l'estimation grâce à correctEstimation()
    si l'estimation est correcte:
    on ajoute 1 au nombre de résultat correct\n
    dans tous les cas on ajoute 1 dans le nbTotal
    --
    **return**
    L'adresse du premier chainon de la liste chainée
}

object "bool correctEstimation()" as corEst {
    **arguments**
    - int real
    - int estimate
    --
    **do**
    vérifie si l'estimation est correct
    (que les nombres soient égaux)
    --
    **return**
    vrai si l'estimation est correct, faux si elle ne l'est pas
}

object "double toPercent()" as pct {
    **arguments**
    - double ratio
     --
    **do**
    converti un ratio en poucentage
    --
    **return**
    double percent
}

object "double ratio()" as ratio {
    **arguments**
    - int num, int den
     --
    **do**
    Calcul le ratio entre 2 nombres entier
    --
    **return**
    le ratio des 2 nombres ou 0 si le dénominateur est égal 0
}


'note left of creClass : Précondition:\nla classe n'existe pas\ndans result

object "ResultClass* createClass()" as creClass {
    **arguments**
    - int numClass
    --
    **do**
    créer un nouvel espace mémoire pour la structure ResultClass créée 
    et initialise son num en fonction de la classe et le reste 
    de ses arguments à zéros
    --
    **return**
    L'adresse du nouveau chainon
}

object "ResultClass* searchClass()" as seaCla {
    **arguments**
    - int numClass
    - ResultClass* pFirstResult
    --
    **do**
    recherche la classe correspondante à numClass
    
    --
    **return**
    si pFirstResult est NULL : NULL
    si on arrive en fin de list sans trouver le bon chainon: le dernier chainon
    sinon: le chainon correspondant à l'élément recherché.
}

object "double accuracy()" as acc {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    --
    **do**
    calcule la précision des résultats en bouclant 1 fois
    et en vérifiant si les nombres correspondent grâce à correctEstimation().
    --
    **return**
    un double entre 0 et 1 qui correspond
    au ratio de bonne réponse
}

object "int statsClass()" as staCla {
    **arguments**
    - int realClasses[]
    - int estimateClasses[]
    - int nbTests
    - int tabStats[NB_CLASSES_MAX][NB_CLASSES_MAX]
    --
    **do**
    initialise nbMax (le numéro de la classe la plus élevé à 0)
    boucle nbTests fois et pour chaque real et estimate class:
    ajoute 1 dans la ligne correspondant à realclass à la colonne
    correspondant à estimateclass (num - 1)
    Met à jour nbMax si nécessaire par rapport à la real et estimate class.
    
    --
    **return**
    le numéro le plus grand trouvé dans realClasses ou estimateClasses.
}

object "int sumElements()" as nbEl {
    **arguments**
    - int tab[]
    - int taille
    --
    **do**
    additionne les nombres dans le tableau
    --
    **return**
    la somme des éléments
}

object "void freeResultClassLinkedList()" as freeRCLL {
    **arguments**
    - ResultClass* pFirstResult
    --
    **do**
    libère de la mémoire le contenu de la liste chainée.
}

' Liens
main --> corEst
main --> seaCla
main --> creClass
drfec --> pct
drfec --> main
drfec --> ratio
da --> acc
acc --> corEst
da --> pct
drfec --> freeRCLL
dc --> staCla
dc --> nbEl

@enduml